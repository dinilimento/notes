
Spring + JPA cursus Infosupport
-------------------------------


# Dag 1 - JPA

Java 1995, meegelift op Internethype via Applets + dynamische code

Java Standard edition draait in JVM
JVM 
- vertaalt classfiles naar bytecode en naar platform
- garbage collection
- security manager
- 

Microsoft .NET -> java van microsoft

Java 2000, enterprise 
-> Gaat niet meer alleen uit van JVM, maar geeft al een aantal voorzieningen mee voor uitdagingen voor elk bedrijf
-> standardiseren van veelvoorkomende handlingen als bijv. het mappen van URL's op methodes
(URLs mappen naar methodes via ServletSpec)

JDBC: java database connectivity
-> moet je alsnog sql schrijven in je java applicatie
JPA: java persistence api
-> vanuit objecten naar DB toe

JAAS: java authentication and authorisation specification
JavaMail: mail server aansluiten
JMS: Java messaging specificatie

JEE app is eigenlijk geen app, maar een toevoeging aan een bestaande app.
JEE beschrijft ook hoe je app moet communiceren met de bestaande componenten

Java Application wordt "Application Server" genoemd
IBM brengt hiervan Websphere uit
Oracle Weblogic
Tommy? Tomcat
Application server wordt ook wel container genoemd

Sun brengt een paar nieuwe goodies uit die "te geniaal" waren waardoor het gebruik niet goed ging en alles kapot ging

Rod Johnson wordt architect bij Sun. Schrijft het boek "Expert One-on-One J2EE Design and Development" 
-> hoe bouw je met JEE een goede applicatie. Geeft aan: gebruik deze dingen absoluut niet en deze dingen wel
Later vormen de dingen die wel goed werken de basis voor het Spring framework

********************
Spring Framework 1.0
********************
- Op basis van POJO's
- Dependency injection (framework)
- AOP: Aspect oriented programming

Deze drie vormen samen de Spring Core Module

Gebruiken design patterns om de goede dingen uit JEE te vergemakkelijken
Belangrijke is het Template Pattern

Hierdoor wordt veel werk uit handen genomen, daardoor wordt Spring groots ten nadele van alle dure oplossingen

Applicatie Server = container
Container bevat:
- Webcontainer
- EJB container

Spring container vervangt de EJB container

Webcontainer: Tomcat, Jetty, Undertow. JBoss is soort spring maar dan nog niet zo oud


De opkomst van de relationele database:
Abstractie van al het gezeik met files zodat je alleen nog commando hoeft te geven en het wordt opgeslagen
Later ook de komst van de transactie waarmee allerlei safeguards ingebouwd worden

Alle RDBS: API waartegen je kan aanpraten
Client side API kan je aanspreken en die API zoekt dan de overeenkomstige server side API en geeft door`

Praten tegen RDBS die in C is geschreven? Hoe moet dat vanuit Java?
JVM is natuurlijk ook in C geschreven...
JNI: Java Native Interface
Hiermee kan je java code koppelen aan een variant in C code.
JNI wordt ook uitbundig gebruik in de JRE

Kan via JNI alle methodes mappen op de C methodes en dan via Client API naar RDB.
Komt er een nieuwe DB zoals bijv. DB2? Alles opnieuw maken....
Dat is niet handig dus: JDBC API ertussen
Via JDBC: standaard gedragingen beschrijven en daarvoor specificeren wat er moet gebeuren op DB
Bestaat uit Interfaces:
- Connection
- Statement
- ResultSet
En maar één klasse met gedrag:
- Driver manager
    -> Register methode. Als er een DB aan wordt gekoppeld bewaard de manager de connecties etc. 
       zodat je aan de Driver manager referenties kan opvragen


Nu kan Oracle op basis van de JDBC hun eigen JNI implementatie schrijven
Dit heet de JDBC driver voor (oracle/db2/andere vendor of implementatie)

Mavenproject:
- Group ID: wereldwijd uniek zijn
- Artefact ID: binnen bedrijf uniek zijn

JDBC: checked exceptions -> worden door compiler opgevangen

ORM frameworks: object relational mapping framework
Bedoelt om af te komen van de harde koppeling via JDBC tussen objecten en DB model

Bijv: Hibernate = ORM framework
Dit is een high-level abstractie die leunt op JDBC

Je hebt hiernaast bijv. ook EclipseLink (vanuit Oracle, maar gedoneerd aan open source community, doet het goed op OracleDB) of OpenJPA (goed op IBM, DB2)

Als ontwikkelaar wil je daarbovenop natuurlijk nog een mogelijkheid om alles op zelfde manier te regelen:
JPA!
Tussen JPA en java app zit nog een entity manager die persist() kan doen en dan zou alles netjes in DB moeten komen

Implementeren:
- mvn dependency (hibernate heeft JPA aan boord)
- config maken (main of test /resources) -> kan andere settings gebruiken voor main of test
- google naar persistence.xml 
- object annoteren met @Entity: wordt mapping gemaakt tussen klasse en DB-tabel
- @Id geeft aan welk attribuut het object uniek maakt
- Transaction-type: resource JTA
- nu nog even zelf transactie starten en committen


# Dag 2 - JPA

IntelliJ heeft via ctrl + shift + a een optie Data Sources... en daarin kan je configureren waar je DB is zodat je via IntelliJ
geen fouten meer krijgt op db naam

Persistence.createEntityMangerFactory() doet erg veel werk, zoals:
Persistence Unit inlezen
Inladen klassen
Connectie maken naar DB
Code voor Inserts/Deletes/Updates genereren
Screenen van tabellen en eventueel aanmaken/updaten
Dus niet te vaak doen, want dure transactie!!!

Persist commando zet een opdracht op een lijstje (persistence context)
Flush voert commando's uit, wil je normaal eigenlijk niet doen kan als onderdeel van de commit.
Flush zet wel locks, die blijven staan tot de commit dus nooit flushen, maar gewoon in commit.
Commit maakt alle opdrachten echt definitief, de DB laat dit dan aan de Clients zien.

Alle Entity's die op het lijstje staan als referenties worden "Managed" genoemd

Voor JPA is de persistence context de waarheid. Hij leest daar altijd doorheen.
Dus bij een find van object wat in persistence context staat zal die niet naar de DB gaan.
Hiervoor kan je evt. de clear() methode gebruiken om de cache te legen.

Je zou dus in twee runtimes lekker bezig kunnen zijn en dan in je pers. context alles gecached hebben waardoor je de waarheid (db) niet meer kent.
Hiervoor kan je de klassen verrijken met: 

@Version
@Getter(value=AccessLevel.NONE) -> zorgen dat anderen hier af blijven, mag alleen voor DB gebruikt worden
@Setter(value=AccessLevel.NONE) -> zorgen dat anderen hier af blijven, mag alleen voor DB gebruikt worden
private long rowversion;

Optimistic Concurrency Control:
Niet locken vooraf/bij select, maar bij mutaties kijken of je nog de juiste versie hebt

Zit er misschien auto-enabled row versioning in?
Alternatief: @Entity superklasse met rowversioning

Entitymanager.clear() leegt "cache" van persistence context.

Junit 
@Before setup() runt voor elke test
@After tearDown() runt na elke test

EntityManager.merge() voor toevoegen als managed entity op persistence context. Kan alleen wanneer Entity al in DB staat met dat ID.
Geeft een managed entity terug, neemt de un-managed entity in.
Belangrijk om te onthouden: is een entity wel of niet managed? 
Zo ja: zodra commit is voltooid staat toestand op moment van commit in DB.

JPQL: JPA Query language
-> mogelijkheid om het over objecten te blijven houden ipv dat je de tabellen moet kennen

Entity heeft als java klasse een tegenhanger als tabel in DB

# Relaties
@OneToOne -> een op een relatie
Wanneer deze niet unidirectioneel is maar bidirectioneel kan lastig worden:
Op DB niveau wil je normaliseren omdat je anders problemen krijgt met alles consistent houden (2 klokken weet je nooit hoe laat het is)
Oplossing is op DB normaliseren, op JPA Active en Passive side aangeven
De active side is in de lead (afhankelijk van context te bepalen welke kant van de relatie dat moet zijn)
Je geeft dan een de passive side de referentie naar de andere kant van de relatie aan met "mappedBy=passiveSideEntity"
ManyToOne relatie heeft geen optie tot mapped my aangezien de Many kant nooit passief kan zijn

OneToOne wordt opgehaald met eager loading: beide zijden worden gelijk opgehaald
OneToMany wordt opgehaald met lazy loading: passive side wordt pas opgehaald als relatie daadwerkelijk gebruikt wordt (voorkomt laden van complete db)

@Inheritance -> strategy opgeven. Als je niets opgeeft dan krijg je SINGLE_TABLE strategy

inheritanceType.JOINED -> super genormaliseerd model
inheritanceType.TABLE_PER_CLASS -> concrete klassen als tabel, soms dubbele info, soms niet.
Voordeel => alleen benodigde werk voor specifieke query ipv alles ophalen
Nadeel => als je alles wilt hebben duurt het langer


# Dag 3 - Spring

(korte herhaling, staat wellicht al hierboven beschreven)

JRE -> alles om java applicaties te draaien
JDK -> alles om java applicaties te ontwikkelen (en dus ook draaien dus heeft ook een JRE)
        -> bevat bijvoorbeeld ook compiler en andere tools die je nodig hebt voor ontwikkelen

JVM -> belangrijke dingen die die doet:
- Garbage collection
- Security management
- Draaien op elk OS (Linux/Windows/MacOS)


JEE is dezelfde weg op gegaan als Spring, maar zijn nog verschillen:
- Spring is veel sneller met nieuwe technologien implementeren (minder afhankelijkheden)

Spring is gebaseerd op vier dingen:
- POJO based
- Dependency Injection
- AOP (aspect oriented programming)
- Template pattern

(einde korte herhaling)

SPRING

Dependency Injection
Object wat een ander object nodig heeft (collaborator) is onhandig met new Object() vanwege:
- unittesten lastig
- onderhoudbaarheid wordt lastiger
- moet wellicht allemaal dingen weten van de constructor van de collaborator

Kan via:
- XML
- Annotaties
- Java Config

Side note:
Maven heeft veel defaults en minder flexibel als je het wat anders wilt

Spring Application Context -> lijst van alle java objecten die door spring kunnen worden behandeld
Ook bekend als Spring Container

Dependency injection in spring wordt alleen beschikbaar gemaakt voor "Spring beans"
Aangeven welke klassen spring beans zijn kan weer via xml, annotaties en java config

Via xml:
applicationContext.xml file, daarin:
<bean id="identifier_naam" class="package.Class"/>
Op die manier kan de klasse die als bean aangemerkt is gebruikt worden door de Spring Container

In code: ClassPathXmlApplicationContext klasse instantieren 
Via applicationContext kan je dan een Bean ophalen met getBean(Classname.class);

In bean geef je met ref= de verwijzing naar de id van andere beans

<constructor-arg> constructor Dep. Inject. </constructor-arg>
<property name="naam member" ref="id andere bean"> setter Dep. Inject. 

Autowiring: wanneer object een interface implementeerd wil je dat de container dit alvast uitzoekt
Scheelt hoop XML/handmatig werk

SpringContainer start pas op als die in z'n geheel consistent is.

Autowire kan niet bij meerdere kandidaten die voor de autowire in aanmerking komen.
Oplossing: aangeven welke niet voor autowire gebruikt wordt, of juist wel (twee manieren)

Life-cycle Callbacks
Zorgen dat dependecies goed ingeregeld zijn voordat methoden kunnen worden uitgevoerd.
Is te configureren via xml/java config en vast ook met annotaties

Met @Configuration boven klasse geef je aan dat in die klasse springbeans definitions zitten.
Springbean definieren door @Bean boven methodes waarbij de return elementen de klasse is die de bean moet worden.
Bijv.

@Bean
public PrinterService printerService(){
    return new ConsolePrinter();
}

--> Wat gebeurd er als je dit doet?????
@Bean
public PrinterService printerService(){
    return new ConsolePrinter();
}

@Bean
public PrinterService printerService(){
    return new FilePrinter();
}

Spring Beans zijn singleton by default -> als er al ref beschikbaar is krijg je diezelfde ref terug.

Factory Bean pattern: Bean initialiseren en die bean vervolgens andere beans laten maken. Die andere beans kan je dan teruggeven als lijstje
Lijstje zelf is dan opzich ook een bean die je dus kan opvragen.


# Dag 4 - Spring


Scopes
- Singleton
    Één instantie van de bean, dependencies worden gedeeld
- Prototype
    Nieuwe instantie voor elk 'injection point'
- Prototype + method injection
    Nieuwe instantie voor elke call van de injected method

Web only scopes:
- Request
    Instance per HTTP request
- Session
    Instance per HTTP session


Geheugenindeling:
Heap -> objecten die worden aangemaakt worden op de heap gezet (garbage collector kijkt wat nog wordt gebruikt en maakt deze ruimte vrij)
Stack -> de lokale data voor de methoden van een object en referenties naar andere objecten in de heap
Data
Code


Spring beans definieren:
@Component boven de klasse zetten
is hetzelfde als in @Configuration een @Bean toevoegen met de juiste DI

@ComponentScan kan je doen in @Configuration en dan packages aangeven, dus je kan een hybride oplossing kiezen met zowel annotaties als java config

@Component alternatieven:
- @Repository (beans gerelateerd aan DB access)
- @Service (beans die services aanbieden)
- @Controller (beans die webafhandeling kunnen doen)


@Autowired kan je plaatsen op:
- veld (field injection)
        @Autowired
        private Printerservice printerService;

- constructor (constructor injection)
        @Autowired
        public ConstructorDI( Printerservice printerService){
            this.printerService = printerService;
        }

- setter (setter injection)
        @Autowired
        public void setPrinterService( Printerservice printerService){
            this.printerService = printerService;
        }


Meerdere configs kan je in één @Configuration onderbrengen met @Import(Configclass1.class, Configclass2.class)

AOP Aspect Oriented Programming
Aspecten die je graag wilt hergebruiken kan je zo invoegen in klassen (zonder van -multiple-inheritance gebruik te maken)
Spring doet hier niet "weaving", maar gebruikt het "proxy-model" waarbij een soort kopie wordt getrokken.
In de kopie worden dan de te hergebruiken aspecten rondom de methode van het originele object geplaatst. 
Het originele object doet nog steeds het werk en komt dan weer terug in de kopie. 
De kopie retourneerd uiteindelijk naar de client.

Belangrijke termen:
- Join point: punt waarop wordt ingegrepen (aspect inbrengen)
- Advice: actie die je op het punt onderneemt en wanneer je dit doet (around (voor en na), before, after)
- Pointcut: manier om meerdere joinpoints aan te kunnen wijzen


# Dag 5 - Spring


JDBC had heel veel checked exceptions (compiler dwingt af dat je die lokaal afhandelt of doorgooit en later afhandelt)
    -> dit zorgt voor erg veel werk
Spring legt hier met JDBCtemplate een oplossing voor neer
Door DB specifieke exceptions te abstraheren naar een generiek DB exception mechanisme

Spring Boot
In Maven de dependency ophalen, maar ook de parent. De parent regelt dan in dat alle spring dependencies de juiste versie hebben
Parent heeft dus de versie, de dependencies zelf kan je versieloos laten.

implements CommandLineRunner -> nog voor er business logica wordt uitgevoerd zal de code van de 'run' methode worden uitgevoerd.
Zo kan je dingen initialiseren

Spring maakt van complete pakket een "fat jar", daarin zitten alle dependencies al.

DevTools heeft al een h2 in-memory DB mee die standaard onder localhost:8080/h2-console wordt opengesteld




Vragen:
- Is spring nu een implementatie, specificatie of allebei?
- cyclische complexiteit (nav lagen model)
- 3e manier van dependency injection (constructor, setter en ...)


- Hoe werkt strategypattern samen met DI van spring (@Component)

- zelf opzoeken: waar komt "boilerplate" vandaan...?
- zelf opzoeken: nodejs "reveal" package om vanuit markdown presentaties te "hosten"
- zelf verder uitzoeken: wanneer is iets een "bean"? (serializable, pojo, ...?) en hoe verhoudt zich dit tot een Spring Bean?


V Hoe werkt "reflectie"?
    -> at runtime kan je in sommige talen (java) via de metadata alles uit een methode te lezen, ook private velden en methoden
        -> met reflectie kun je deze dan ook daadwerkelijk aanroepen/gebruiken (https://stackoverflow.com/questions/37628/what-is-reflection-and-why-is-it-useful)
        
V Slimme manier om erachter te komen welke versie waar goed mee om gaat?
    -> nee, bijhouden via blogs en zelf achter komen